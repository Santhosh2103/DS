#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 100
struct Stack 
{
    int items[MAX_SIZE];
    int top;
};
void initializeStack(struct Stack* stack) 
{
    stack->top = -1;
}
int isEmpty(struct Stack* stack) 
{
    return (stack->top == -1);
}
int isFull(struct Stack* stack) 
{
    return (stack->top == MAX_SIZE - 1);
}
void push(struct Stack* stack, int value) 
{
    if (isFull(stack)) 
	{
        printf("Stack overflow. Cannot push element %d.\n", value);
        return;
    }
    stack->items[++(stack->top)] = value;
}
int pop(struct Stack* stack) 
{
    if (isEmpty(stack)) 
	{
        printf("Stack underflow. Cannot pop element.\n");
        return -1; 
    }
    return stack->items[(stack->top)--];
}
int peek(struct Stack* stack) {
    if (isEmpty(stack)) 
	{
        printf("Stack is empty. Cannot peek.\n");
        return -1; 
    }
    return stack->items[stack->top];
}
int main() {
    struct Stack stack;
    initializeStack(&stack);
    int choice, value;
    do 
	{
        printf("\nStack Operations\n");
        printf("1. Push element\n");
        printf("2. Pop element\n");
        printf("3. Peek at top element\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) 
		{
            case 1:
                printf("Enter the element to push: ");
                scanf("%d", &value);
                push(&stack, value);
                break;
            case 2:
                value = pop(&stack);
                if (value != -1) 
				{
                printf("Popped element: %d\n", value);
                }
            break;
            case 3:
                value = peek(&stack);
                if (value != -1) {
                printf("Top element: %d\n", value);
                }
				break;
            case 4:
            printf("Exiting the program.\n");
            break;
            default:
            printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 4);
    return 0;
}
